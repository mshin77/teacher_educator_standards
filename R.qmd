---
title: ''
format:
  html:
    code-fold: true
    code-tools: true
---

```{=html}
<style>
  .responsive-figure {
    width: 100% !important;
    height: auto;
  }
</style>
```
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
```

::: panel-tabset

## Participants

```{r, echo=FALSE}
suppressPackageStartupMessages({
  library(readxl)
  library(officer)
  library(likert)
  library(gtsummary)
  library(flextable)
  library(ggplot2)
  library(tidyr)
  library(dplyr)
  library(reshape2)
  library(psych)
  library(corrplot)
})

load("data/teacher_education_standards.RData")
```

```{r, echo=FALSE, eval=FALSE}
demo_tbl <- data %>%
  dplyr::select(teaching_years, gender, age, program) %>%
  tbl_summary(
              percent = "column") 
  
demo_tbl_ft <- as_flex_table(demo_tbl)
```

```{r}
demo_tbl_ft 
```

## Internal Consistency

#### Calculate Cronbach's alpha

```{r, eval=FALSE, echo=FALSE}
#| code-fold: false
calculate_alpha <- function(data, prefix) {
  category_cols <- grep(paste0("^", prefix), colnames(data), value = TRUE)
  alpha_result <- alpha(data[, category_cols])
  cat(paste("Cronbach's alpha for", prefix, ":", format(alpha_result$total$raw_alpha, digits = 2, nsmall = 2)), "\n")
  return(alpha_result)
}

alpha_standard1 <- calculate_alpha(data, "standard1")
alpha_standard2 <- calculate_alpha(data, "standard2")
alpha_standard3 <- calculate_alpha(data, "standard3")
alpha_standard4 <- calculate_alpha(data, "standard4")
alpha_standard5 <- calculate_alpha(data, "standard5")
alpha_standard6 <- calculate_alpha(data, "standard6")
```

#### standard 1

```{r, echo=FALSE}
summary(alpha_standard1)
```

#### standard 2

```{r, echo=FALSE}
summary(alpha_standard2)
```

#### standard 3

```{r, echo=FALSE}
summary(alpha_standard3)
```

#### standard 4

```{r, echo=FALSE}
summary(alpha_standard4)
```

#### standard 5

```{r, echo=FALSE}
summary(alpha_standard5)
```

#### standard 6

```{r, echo=FALSE}
summary(alpha_standard6)
```

## Semantic Similarity

[Python code](python.html)

<iframe src="plot.html" width="100%" height="600px" style="border:none;"></iframe>

## Standards

```{r, eval=FALSE, echo=FALSE}
selected_data <- data %>% select(id:program, standard1_1:standard6_5)

init_long_data <- melt(selected_data, id.vars = c('id', 'teaching_years', 'gender', 'age', 'program'), variable.name = 'standard', value.name = 'response')

openxlsx::write.xlsx(init_long_data, "data/init_long_data.xlsx", asTable = TRUE)

init_long_data <- init_long_data %>% mutate(response = case_when(
    response == "1" ~ "Beginning",
    response == "2" ~ "Developing",
    response == "3" ~ "Implementing",
    response == "4" ~ "Maintaining",
    response == "5" ~ "Transforming"
  )) 

wide_data <- init_long_data %>%
  spread(key = standard, value = response)

selected_df <- wide_data %>% select(standard1_1:standard6_5) %>% mutate(across(everything(), as.factor))

levels <- function(df) {
  all_levels <- c("Beginning", "Developing", "Implementing", "Maintaining", "Transforming")
  for (col in colnames(df)) {
    df[[col]] <- factor(df[[col]], levels = all_levels, ordered = TRUE)
  }
  return(df)
}

selected_df <- levels(selected_df)

selected_df <- selected_df %>% rename(
  "Standard 1-1" = standard1_1,
  "Standard 1-2" = standard1_2,
  "Standard 1-3" = standard1_3,
  "Standard 1-4" = standard1_4,
  "Standard 1-5" = standard1_5,
  "Standard 2-1" = standard2_1,
  "Standard 2-2" = standard2_2,
  "Standard 2-3" = standard2_3,
  "Standard 2-4" = standard2_4,
  "Standard 2-5" = standard2_5,
  "Standard 3-1" = standard3_1,
  "Standard 3-2" = standard3_2,
  "Standard 3-3" = standard3_3,
  "Standard 3-4" = standard3_4,
  "Standard 3-5" = standard3_5,
  "Standard 4-1" = standard4_1,
  "Standard 4-2" = standard4_2,
  "Standard 4-3" = standard4_3,
  "Standard 5-1" = standard5_1,
  "Standard 5-2" = standard5_2,
  "Standard 5-3" = standard5_3,
  "Standard 5-4" = standard5_4,
  "Standard 5-5" = standard5_5,
  "Standard 5-6" = standard5_6,
  "Standard 6-1" = standard6_1,
  "Standard 6-2" = standard6_2,
  "Standard 6-3" = standard6_3,
  "Standard 6-4" = standard6_4,
  "Standard 6-5" = standard6_5
)

S1 <- likert(selected_df[,c(1:5)]) 
S2 <- likert(selected_df[,c(6:10)])
S3 <- likert(selected_df[,c(11:15)])
S4 <- likert(selected_df[,c(16:18)])
S5 <- likert(selected_df[,c(19:24)])
S6 <- likert(selected_df[,c(25:29)])
```

#### Teacher Educator Standard 1

```{r}
plot(S1, legend.position="right") + theme_minimal(base_size = 14) +
    theme(
    axis.text.x = element_text(size = 10),         
    axis.text.y = element_text(size = 10),         
    axis.title.x = element_text(size = 10),        
    axis.title.y = element_text(size = 10),        
    legend.title = element_text(size = 10),        
    legend.text = element_text(size = 10)
  ) +
  scale_fill_brewer(palette = "YlGnBu", breaks = c("Beginning", "Developing", "Implementing", "Maintaining", "Transforming"))

ggsave("results/standard1.png", height = 3, width = 7)
```

#### Teacher Educator Standard 2

```{r}
plot(S2, legend.position="right") + theme_minimal(base_size = 14) +
    theme(
    axis.text.x = element_text(size = 10),         
    axis.text.y = element_text(size = 10),         
    axis.title.x = element_text(size = 10),        
    axis.title.y = element_text(size = 10),        
    legend.title = element_text(size = 10),        
    legend.text = element_text(size = 10)
  ) +
  scale_fill_brewer(palette = "YlGnBu", breaks = c("Beginning", "Developing", "Implementing", "Maintaining", "Transforming"))

ggsave("results/standard2.png", height = 3, width = 7)
```

#### Teacher Educator Standard 3

```{r}
plot(S3, legend.position="right") + theme_minimal(base_size = 14) +
    theme(
    axis.text.x = element_text(size = 10),         
    axis.text.y = element_text(size = 10),         
    axis.title.x = element_text(size = 10),        
    axis.title.y = element_text(size = 10),        
    legend.title = element_text(size = 10),        
    legend.text = element_text(size = 10)
  ) +
  scale_fill_brewer(palette = "YlGnBu", breaks = c("Beginning", "Developing", "Implementing", "Maintaining", "Transforming"))

ggsave("results/standard3.png", height = 3, width = 7)
```

#### Teacher Educator Standard 4

```{r}
plot(S4, legend.position="right") + theme_minimal(base_size = 14) +
    theme(
    axis.text.x = element_text(size = 10),         
    axis.text.y = element_text(size = 10),         
    axis.title.x = element_text(size = 10),        
    axis.title.y = element_text(size = 10),        
    legend.title = element_text(size = 10),        
    legend.text = element_text(size = 10)
  ) +
  scale_fill_brewer(palette = "YlGnBu", breaks = c("Beginning", "Developing", "Implementing", "Maintaining", "Transforming"))

ggsave("results/standard4.png", height = 3, width = 7)
```

#### Teacher Educator Standard 5

```{r}
plot(S5, legend.position="right") + theme_minimal(base_size = 14) +
    theme(
    axis.text.x = element_text(size = 10),         
    axis.text.y = element_text(size = 10),         
    axis.title.x = element_text(size = 10),        
    axis.title.y = element_text(size = 10),        
    legend.title = element_text(size = 10),        
    legend.text = element_text(size = 10)
  ) +
  scale_fill_brewer(palette = "YlGnBu", breaks = c("Beginning", "Developing", "Implementing", "Maintaining", "Transforming"))

ggsave("results/standard5.png", height = 3, width = 7)
```

#### Teacher Educator Standard 6

```{r}
plot(S6, legend.position="right") + theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(size = 10),         
    axis.text.y = element_text(size = 10),         
    axis.title.x = element_text(size = 10),        
    axis.title.y = element_text(size = 10),        
    legend.title = element_text(size = 10),        
    legend.text = element_text(size = 10)
  ) +
  scale_fill_brewer(palette = "YlGnBu", breaks = c("Beginning", "Developing", "Implementing", "Maintaining", "Transforming"))

ggsave("results/standard6.png", height = 3, width = 7)
```

## Correlation

#### Spearman's Correlation

```{r, eval=FALSE, echo=FALSE}
cor_data <- data %>% select(standard1_1:standard6_5) 

cor_matrix <- cor(cor_data, method = "spearman", use = "complete.obs")
```

```{r, fig.width=9, fig.height=9, out.extra='class="responsive-figure"'}
corrplot(cor_matrix, method = "color", type = "upper", 
         tl.col = "black", tl.srt = 45, 
         tl.cex = 1,
         addCoef.col = "black", number.cex = 0.75, 
         diag = FALSE)
```

```{r}
cor_summary <- function(cor_matrix) {
  cor_values <- cor_matrix[upper.tri(cor_matrix)]
  
  summary <- list(
    mean = round(mean(cor_values), 2),
    median = round(median(cor_values), 2),
    sd = round(sd(cor_values), 2),
    min = round(min(cor_values), 2),
    max = round(max(cor_values), 2)
  )
  return(summary)
}

cor_summary <- cor_summary(cor_matrix)
```
:::
